# -*- coding: utf-8 -*-
"""Rule based MT - Alternate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZL1kqA8N-r_xvpKtRV28qc6oUkyvM8vc

Import Packages
*   nltk: NLP
*   itertools: Remove consecutive duplicates
*   PorterStemmer: Get root words
*   punkt: Classifier
*   averaged_perceptron_tagger: Tagging
*   sent_tokenize: Tokenize sentence
*   word_tokenize: Tokenize word
*   nps_chat: XML posts
"""
# from . import searcher

import nltk

from itertools import groupby

from nltk.stem import PorterStemmer

ps = PorterStemmer()

# nltk.download('punkt')

# nltk.download('averaged_perceptron_tagger')

from nltk.tokenize import sent_tokenize

from nltk.tokenize import word_tokenize

# nltk.download('nps_chat')

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report

"""Import Dictionary"""


from pandas import *

dat=read_csv("translator\output.csv")

"""Create Column lists"""

eng=dat["eng"].tolist()
tamil=dat["tamil"].tolist()
pron=dat["pronunciation"].tolist()
syn=dat["synonym"].tolist()

"""Function for Finding word from dictionary"""
# use nammade binary search


"""For accuracy"""

def dialogue_act_features(post):
    features = {}
    for word in nltk.word_tokenize(post):
        features['contains({})'.format(word.lower())] = True
    return features

"""Input Sentence---------------------------------------------------------------------------------------------------"""

sample = "how are you"

"""Accuracy of classifier

ALGORITHM-1
"""

# posts = nltk.corpus.nps_chat.xml_posts()[:10000]

# featuresets = [(dialogue_act_features(post.text), post.get('class')) for post in posts]
# size = int(len(featuresets) * 0.1)
# train_set, test_set = featuresets[size:], featuresets[:size]
# classifier = nltk.NaiveBayesClassifier.train(train_set)
# print(nltk.classify.accuracy(classifier, test_set))

# print(classifier.classify(dialogue_act_features(sample)))

"""ALGORITHM-2"""

posts = nltk.corpus.nps_chat.xml_posts()

posts_text = [post.text for post in posts]

#divide train and test in 80 20
train_text = posts_text[:int(len(posts_text)*0.8)]
test_text = posts_text[int(len(posts_text)*0.2):]

#Get TFIDF features
vectorizer = TfidfVectorizer(ngram_range=(1,3), 
                             min_df=0.001, 
                             max_df=0.7, 
                             analyzer='word')

X_train = vectorizer.fit_transform(train_text)
X_test = vectorizer.transform(test_text)

y = [post.get('class') for post in posts]

y_train = y[:int(len(posts_text)*0.8)]
y_test = y[int(len(posts_text)*0.2):]

# Fitting Gradient Boosting classifier to the Training set
gb = GradientBoostingClassifier(n_estimators = 400, random_state=0)
#Can be improved with Cross Validation

gb.fit(X_train, y_train)

predictions_rf = gb.predict(X_test)

# print(classification_report(y_test, predictions_rf))

